{"version":3,"sources":["components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","event","preventDefault","setState","loading","generatedURL","validateInput","generatedKey","nanoid","state","preferedAlias","db","getDatabase","set","ref","longURL","then","results","catch","e","hasError","key","errors","indexOf","handleChange","target","id","value","prevState","errorMessages","errorMessage","length","push","isWebUri","checkKeyExists","exists","dbRef","get","child","error","copyToClipBoard","navigator","clipboard","writeText","toolTipMessage","className","autoComplete","onChange","this","type","required","placeholder","htmlFor","suggestedAlias","onClick","role","disabled","OverlayTrigger","placement","overlay","Tooltip","title","React","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0853da93.chunk.js","sourcesContent":["import React from 'react';\n// generates Ids URL safe\nimport { nanoid } from 'nanoid';\n// firebase database methods\nimport { getDatabase, child, ref, set, get } from 'firebase/database';\n// validates web url\nimport { isWebUri } from 'valid-url';\nimport { OverlayTrigger } from 'react-bootstrap';\n// message\nimport Tooltip from 'react-bootstrap/Tooltip';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // stores long URL input made by user\n      longURL: '',\n      //   stores users preferedAlias\n      preferedAlias: '',\n      //   generated URL for user auto generated or users input\n      generatedURL: '',\n      //   visual loading\n      loading: false,\n      //   keep track of fields with errors\n      errors: [],\n      errorMessage: {},\n      toolTipMessage: 'Copy To Clip Board',\n    };\n  }\n  //   When the user clicks submit, this will be called\n  onSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({\n      loading: true,\n      generatedURL: '',\n    });\n    // validate the input the user has submitted\n    var isFormValid = await this.validateInput();\n    if (!isFormValid) {\n      return;\n    }\n\n    // if the user has input a preferred alias then we use it, if not, we genertae one\n    // Be sure to change minilinkit.com to your domain\n    var generatedKey = nanoid(5);\n    var generatedURL = 'minilinkit.com/' + generatedKey;\n\n    if (this.state.preferedAlias !== '') {\n      generatedKey = this.state.preferedAlias;\n      generatedURL = 'minilinkit.com/' + this.state.preferedAlias;\n    }\n    // content added to firebase database\n    const db = getDatabase();\n    // set method passed to database and path of generated key\n    set(ref(db, '/' + generatedKey), {\n      generatedKey: generatedKey,\n      longURL: this.state.longURL,\n      preferedAlias: this.state.preferedAlias,\n      generatedURL: generatedURL,\n\n      //   after data is passed set state of generated url\n    })\n      .then((results) => {\n        this.setState({\n          generatedURL: generatedURL,\n          loading: false,\n        });\n      })\n      //   handle error\n      .catch((e) => {});\n  };\n  // checks if field has an error\n  hasError = (key) => {\n    return this.state.errors.indexOf(key) !== -1;\n  };\n\n  // Save the content of the form as the user is typing!\n  handleChange = (e) => {\n    const { id, value } = e.target;\n    this.setState((prevState) => ({\n      ...prevState,\n      [id]: value,\n    }));\n  };\n  // ensure form input is valid\n  validateInput = async () => {\n    var errors = [];\n    var errorMessages = this.state.errorMessage;\n\n    //   validate long URL\n    //   if url length is 0 error messages is returned\n    if (this.state.longURL.length === 0) {\n      errors.push('longURL');\n      errorMessages['longURL'] = 'Please enter your URL!';\n      // if url is not a proper url\n    } else if (!isWebUri(this.state.longURL)) {\n      errors.push('longURL');\n      errorMessages['longUrl'] =\n        'Please place a URL in form of htttps://www....';\n    }\n\n    // Prefered Alias\n    if (this.state.preferedAlias !== '') {\n      // if characters is more than 7 characters return error\n      if (this.state.preferedAlias.length > 7) {\n        errors.push('suggestedAlias');\n        errorMessages['suggestedAlias'] =\n          'Please Enter an Alias less than 7 Characters';\n        //checks to see if preferred alias has space\n      } else if (this.state.preferedAlias.indexOf(' ') >= 0) {\n        errors.push('suggestedAlias');\n        errorMessages['suggestedAlias'] = 'Spaces are not allowed in URLS';\n      }\n      //   does url already exist?\n      var keyExists = await this.checkKeyExists();\n\n      if (keyExists.exists()) {\n        errors.push('suggestedAlias');\n        errorMessages['suggestedAlias'] =\n          'The Alias you have entered already exists! Please enter another one =-)';\n      }\n    }\n    //update state of page\n    this.setState({\n      errors: errors,\n      errorMessages: errorMessages,\n      loading: false,\n    });\n    if (errors.length > 0) {\n      return false;\n    }\n    return true;\n  };\n\n  //   Fetch database of alias inputted by user and checks if key exists\n  checkKeyExists = async () => {\n    const dbRef = ref(getDatabase());\n    return get(child(dbRef, `/${this.state.preferedAlias}`)).catch((error) => {\n      return false;\n    });\n  };\n\n  //   copies generated URL to clipboard\n  copyToClipBoard = () => {\n    navigator.clipboard.writeText(this.state.generatedURL);\n    this.setState({\n      toolTipMessage: 'Copied',\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <form autoComplete=\"off\">\n          <h3>Mini Url!</h3>\n          <div className=\"form-group\">\n            <input\n              id=\"longURL\"\n              onChange={this.handleChange}\n              value={this.state.longURL}\n              type=\"url\"\n              required\n              className={\n                this.hasError('longURL')\n                  ? 'form-control is-invalid'\n                  : 'form-control'\n              }\n              placeholder=\"https://www...\"\n            />\n          </div>\n          <div\n            className={\n              this.hasError('longURL') ? 'text-danger' : 'visually-hidden'\n            }\n          >\n            {this.state.errorMessage.longURL}\n          </div>\n          {/*  */}\n          <div className=\"form-group\">\n            <label htmlFor=\"basic-url\">Your Mini URL</label>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">miniURL</span>\n              </div>\n              <input\n                id=\"preferedAlias\"\n                onChange={this.handleChange}\n                value={this.state.preferedAlias}\n                className={\n                  this.hasError('preferedAlias')\n                    ? 'form-control is-invalid'\n                    : 'form-control'\n                }\n                type=\"text\"\n                placeholder=\"eg. 3fwias (Optional)\"\n              />\n            </div>\n            <div\n              className={\n                this.hasError('suggestedAlias')\n                  ? 'text-danger'\n                  : 'visually-hidden'\n              }\n            >\n              {this.state.errorMessage.suggestedAlias}\n            </div>\n          </div>\n          {/* button  */}\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            onClick={this.onSubmit}\n          >\n            {this.state.loading ? (\n              <div>\n                <span\n                  className=\"spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n              </div>\n            ) : (\n              <div>\n                <span\n                  className=\"visually-hidden spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                <span>mini URL</span>\n              </div>\n            )}\n          </button>\n          {this.state.generatedURL === '' ? (\n            <div></div>\n          ) : (\n            <div className=\"generatedurl\">\n              <span>Your generated URL is: </span>\n              <div className=\"input-group mb-3\">\n                <input\n                  disabled\n                  type=\"text\"\n                  value={this.state.generatedURL}\n                  className=\"form-control\"\n                  placeholder=\"Recipient username\"\n                  aria-describedby=\"basic-addon2\"\n                />\n                <div className=\"input-group-append\">\n                  <OverlayTrigger\n                    key={'top'}\n                    placement={'top'}\n                    overlay={\n                      <Tooltip id={`tooltip-${'top'}`}>\n                        {this.state.toolTipMessage}\n                      </Tooltip>\n                    }\n                  >\n                    <button\n                      onClick={() => this.copyToClipBoard()}\n                      data-toggle=\"tooltip\"\n                      data-placement=\"top\"\n                      title=\"Tooltip on top\"\n                      className=\"btn btn-outline-secondary\"\n                      type=\"button\"\n                    >\n                      Copy\n                    </button>\n                  </OverlayTrigger>\n                </div>\n              </div>\n            </div>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\nexport default Form;\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"auth-wrapper\">\n          <div className=\"auth-inner\">\n            <Switch>\n              <Route exact path=\"/\" component={Form} />\n              <Route exact path=\"/app\" component={Form} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { initializeApp } from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBmIzrBsw2_xkfKHyBi-NnMsgHlbnlL9kw',\n  authDomain: 'mini-url-d15ac.firebaseapp.com',\n  projectId: 'mini-url-d15ac',\n  storageBucket: 'mini-url-d15ac.appspot.com',\n  messagingSenderId: '581436341123',\n  appId: '1:581436341123:web:8ecaa560d616847290d4b6',\n  measurementId: 'G-Q594VB2WJY',\n};\n\ninitializeApp(firebaseConfig);\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}